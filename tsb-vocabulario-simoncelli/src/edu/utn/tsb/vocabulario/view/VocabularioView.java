/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.utn.tsb.vocabulario.view;

import java.io.File;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.SwingWorker;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

import edu.utn.tsb.vocabulario.db.DataBaseUtil;
import edu.utn.tsb.vocabulario.db.DataBaseUtilImpl;
import edu.utn.tsb.vocabulario.service.DocumentProcessor;
import edu.utn.tsb.vocabulario.service.Processor;

/**
 *
 * @author
 */
public class VocabularioView extends javax.swing.JFrame {

	private File[] archivos;
	private DataBaseUtil acceso = new DataBaseUtilImpl();
	private Processor lec = new DocumentProcessor();
	private Task trabajador;
	ArrayList<String> archivosProcesar = new ArrayList<>();
	ArrayList<String> archivosProcesados = new ArrayList<>();

	public VocabularioView() {
		try {
			archivos = null;
			initComponents();
			cargarYaProcesados();
			cargarGrilla();

		} catch (ClassNotFoundException ex) {
			Logger.getLogger(VocabularioView.class.getName()).log(Level.SEVERE, null, ex);
		} catch (SQLException ex) {
			Logger.getLogger(VocabularioView.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jMenu3 = new javax.swing.JMenu();
		bCargarArchivos = new javax.swing.JButton();
		jScrollPane1 = new javax.swing.JScrollPane();
		tbl_palabras = new javax.swing.JTable();
		lbl_buscador = new javax.swing.JLabel();
		txt_buscador = new javax.swing.JTextField();
		lbl_colaDoc = new javax.swing.JLabel();
		lbl_docProcesados = new javax.swing.JLabel();
		jScrollPane5 = new javax.swing.JScrollPane();
		txtp_colaDoc = new javax.swing.JTextPane();
		jScrollPane2 = new javax.swing.JScrollPane();
		txtp_docProcesados = new javax.swing.JTextPane();
		lbl_procesando = new javax.swing.JLabel();
		txt_procesando = new javax.swing.JTextField();
		pb_barraProgreso = new javax.swing.JProgressBar();
		bBorrarBD = new javax.swing.JButton();

		jMenu3.setText("jMenu3");

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("Trabajo Final");
		setLocationByPlatform(true);
		setMinimumSize(new java.awt.Dimension(741, 446));
		setResizable(false);

		bCargarArchivos.setText("Cargar archivos");
		bCargarArchivos.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				bCargarArchivosActionPerformed(evt);
			}
		});

		tbl_palabras.setModel(new javax.swing.table.DefaultTableModel(new Object[][] { { null, null, null } },
				new String[] { "Palabra", "Frecuencia", "Documentos" }) {
			Class[] types = new Class[] { java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class };
			boolean[] canEdit = new boolean[] { false, false, false };

			public Class getColumnClass(int columnIndex) {
				return types[columnIndex];
			}

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit[columnIndex];
			}
		});
		tbl_palabras.getTableHeader().setReorderingAllowed(false);
		tbl_palabras.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				tbl_palabrasMouseClicked(evt);
			}
		});
		jScrollPane1.setViewportView(tbl_palabras);

		lbl_buscador.setText("Palabra a buscar: ");

		txt_buscador.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyReleased(java.awt.event.KeyEvent evt) {
				txt_buscadorKeyReleased(evt);
			}
		});

		lbl_colaDoc.setText("Cola de documentos");

		lbl_docProcesados.setText("Documentos procesados");

		txtp_colaDoc.setEditable(false);
		jScrollPane5.setViewportView(txtp_colaDoc);

		txtp_docProcesados.setEditable(false);
		jScrollPane2.setViewportView(txtp_docProcesados);

		lbl_procesando.setText("Procesando el archivo: ");

		txt_procesando.setEditable(false);
		txt_procesando.setBackground(new java.awt.Color(255, 255, 255));
		txt_procesando.setEnabled(false);
		txt_procesando.setFocusable(false);

		bBorrarBD.setText("Resetear Base de Datos");
		bBorrarBD.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				bBorrarBDActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								layout.createSequentialGroup().addContainerGap()
										.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addGroup(layout.createSequentialGroup().addComponent(bCargarArchivos)
														.addPreferredGap(
																javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
												.addComponent(lbl_buscador)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addComponent(txt_buscador, javax.swing.GroupLayout.PREFERRED_SIZE, 170,
														javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGroup(layout.createSequentialGroup()
								.addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addGroup(layout.createSequentialGroup().addComponent(lbl_procesando)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addComponent(txt_procesando))
										.addComponent(pb_barraProgreso, javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addGroup(layout.createSequentialGroup()
												.addGroup(layout.createParallelGroup(
														javax.swing.GroupLayout.Alignment.TRAILING)
												.addComponent(bBorrarBD)
												.addGroup(layout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(jScrollPane5,
																javax.swing.GroupLayout.PREFERRED_SIZE, 242,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(jScrollPane2,
																javax.swing.GroupLayout.PREFERRED_SIZE, 242,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(lbl_docProcesados).addComponent(lbl_colaDoc)))
												.addGap(0, 0, Short.MAX_VALUE)))))
										.addContainerGap()));

		layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] { jScrollPane2, jScrollPane5 });

		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addContainerGap()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(bCargarArchivos).addComponent(lbl_buscador)
								.addComponent(txt_buscador, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addComponent(bBorrarBD))
				.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(layout.createSequentialGroup().addComponent(lbl_colaDoc)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 172,
										javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(14, 14, 14)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(lbl_procesando).addComponent(txt_procesando,
										javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(pb_barraProgreso, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(14, 14, 14).addComponent(lbl_docProcesados)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jScrollPane2,
								javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addComponent(jScrollPane1)).addContainerGap()));

		layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] { jScrollPane2, jScrollPane5 });

		txt_procesando.getAccessibleContext().setAccessibleName("");

		pack();
	}// </editor-fold>//GEN-END:initComponents

	/**
	 * Este método se llama cuando se produce el evento en el boton cargar
	 * archivos.
	 *
	 * @param evt
	 */
	private void bCargarArchivosActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_bCargarArchivosActionPerformed
		this.trabajador = new Task(); // Crea el objeto swingworker
		JFileChooser fc = new JFileChooser(); // Crea el filechooser
		fc.setCurrentDirectory(new java.io.File("."));
		fc.setMultiSelectionEnabled(true);// permite la seleccion de múltiples
											// archivos
		fc.setFileFilter(new javax.swing.filechooser.FileFilter() {
			@Override
			public boolean accept(File f) {
				return (f.isFile() && f.getName().endsWith(".txt")) || f.isDirectory();
			}

			@Override
			public String getDescription() {
				return "Archivos de Texto";
			}
		});// permite unicamente la carga de archivos de extencion txt

		if (fc.showDialog(this, "Cargar archivo") != JFileChooser.CANCEL_OPTION) {
			archivos = null;
			archivos = fc.getSelectedFiles(); // asigno la lista de archivos
												// seleccionados

			for (int i = 0; i < archivos.length; i++) {
				archivosProcesar.add(archivos[i].getName()); // agrego los
																// archivos a la
																// cola de
																// proceso

			}
			cargarCola(); // carga el textpane con los nombres de los archivos a
							// procesar
			bCargarArchivos.setEnabled(false); // Deshabilita el botón de cargar
												// archivos mientras se esta
												// procesando la cola de
												// archivos
			bBorrarBD.setEnabled(false);
			trabajador.execute(); // Llama al método doInBackgrond() del
									// swingworker
			if (trabajador.isDone()) {
				bCargarArchivos.setEnabled(true); // cuando el swingworker
													// termino de procesar los
													// archivos habilita el
													// boton nuevamente
				bBorrarBD.setEnabled(true);
			}
		}

	}// GEN-LAST:event_bCargarArchivosActionPerformed

	/**
	 * Este método se ejecuta cuando se escribe en el textbox del buscador y
	 * filtra según el patrón ingresado. Solo busca palabras que comiencen con
	 * dicho patrón
	 *
	 * @param evt
	 */
	private void txt_buscadorKeyReleased(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_txt_buscadorKeyReleased

		String patron = txt_buscador.getText().toUpperCase(); // obtiene el
																// patrón del
																// textbox
		TableModel modelo = tbl_palabras.getModel(); // obtiene el modelo de la
														// tabla
		TableRowSorter sorter = new TableRowSorter(modelo); // crea un
															// tablesorter
		sorter.setRowFilter(RowFilter.regexFilter("(?i)^" + patron + ".*")); // filtra
																				// las
																				// entradas
																				// de
																				// la
																				// tabla
		tbl_palabras.setRowSorter(sorter);
		tbl_palabras.repaint();// vuelve a pintar la tabla
	}// GEN-LAST:event_txt_buscadorKeyReleased

	private void bBorrarBDActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_bBorrarBDActionPerformed
		int result = JOptionPane.showConfirmDialog(rootPane, "Los cambios seran Ireversibles",
				"¿Desea elliminar la base de datos?", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
		if (result == JOptionPane.OK_OPTION) {
			try {
				acceso.dropDB();
				txt_buscador.setText("");
				archivosProcesados.clear();
				txtp_docProcesados.setText("");
				pb_barraProgreso.setValue(0);
				cargarGrilla();
			} catch (ClassNotFoundException ex) {
				Logger.getLogger(VocabularioView.class.getName()).log(Level.SEVERE, null, ex);
			} catch (SQLException ex) {
				Logger.getLogger(VocabularioView.class.getName()).log(Level.SEVERE, null, ex);
			}
		}
	}// GEN-LAST:event_bBorrarBDActionPerformed

	private void tbl_palabrasMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_tbl_palabrasMouseClicked
		getPropertyFromRow((String) (tbl_palabras.getValueAt(tbl_palabras.getSelectedRow(), 0)));
	}// GEN-LAST:event_tbl_palabrasMouseClicked

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed" desc=" Look and feel setting
		// code (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.
		 * html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException | InstantiationException | IllegalAccessException
				| javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(VocabularioView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			@Override
			public void run() {
				new VocabularioView().setVisible(true);
			}
		});
	}

	/**
	 * Carga la grilla con las palabras que están en la base de datos. Llama al
	 * método cargarTabla() de la clase acceso el cual devuelve un modelo de
	 * tabla y se lo asigna a la tabla tbl_palabras
	 *
	 * @throws ClassNotFoundException
	 * @throws SQLException
	 */
	public void cargarGrilla() throws ClassNotFoundException, SQLException {
		tbl_palabras.setAutoCreateRowSorter(true); // permite ordenar las
													// columnas de la tabla
		tbl_palabras.setModel(acceso.cargarTabla());
		tbl_palabras.repaint();

	}

	/**
	 * Carga el textPane de la cola de archivos con los archivos que aún quedan
	 * por procesar
	 */
	private void cargarCola() {
		txtp_colaDoc.setText("");// limpia el txtpane
		for (int i = 0; i < archivosProcesar.size(); i++) { // recorre la lista
															// de archivos a
															// procesar y los
															// agrega al
															// textPane
			txtp_colaDoc.setText(archivosProcesar.get(i) + "\n" + txtp_colaDoc.getText());
		}
	}

	/**
	 * Carga el textPane de los archivos ya procesados
	 */
	private void cargarProcesados() {
		txtp_docProcesados.setText("");
		for (int i = 0; i < archivosProcesados.size(); i++) {
			txtp_docProcesados.setText(archivosProcesados.get(i) + "\n" + txtp_docProcesados.getText());
		}
	}

	/**
	 * Metodo para obtener los documentos a los que pertenece una palabra.
	 * 
	 * @param property
	 *            PALABRA a ser buscada en la bd
	 */
	private void getPropertyFromRow(String palabra) {
		Map<String, Integer> infoPalabra = acceso.getDocuments(palabra);
		StringBuilder infoSalida = new StringBuilder();
		if (!infoPalabra.isEmpty()) {
			Iterator<Entry<String, Integer>> it = infoPalabra.entrySet().iterator();
			while (it.hasNext()) {
				Map.Entry pair = (Map.Entry) it.next();
				infoSalida.append("\nDocumento: ").append(pair.getKey()).append(", frecuencia: ")
						.append(pair.getValue());
			}
		}
		if (!infoPalabra.isEmpty())
			JOptionPane.showMessageDialog(rootPane,
					"Pertenece a los siguientes documentos: " + "\n" + infoSalida.toString(), palabra, WIDTH);
		else
			JOptionPane.showMessageDialog(rootPane, "Pertenece al siguiente documento: " + "\n" + infoSalida.toString(),
					palabra, WIDTH);
	}

	/**
	 * Carga el textPane de los archivos ya procesados en ejecuciones anteriores
	 */
	private void cargarYaProcesados() {
		archivosProcesados.addAll(acceso.getProcessedDocuments());
		cargarProcesados();
	}

	/**
	 * Clase interna que extiende a swingWorker
	 */
	private class Task extends SwingWorker<String, Void> {

		/**
		 * este método se ejecuta cuando un Task llama a execute(). Crea un hilo
		 * que busca las palabras en los archivos y las carga a la BD
		 *
		 * @throws Exception
		 */
		@Override
		protected String doInBackground() throws Exception {

			for (int i = 0; i < archivos.length; i++) { // por cada uno de los
														// archivos
														// seleccionados

				txt_procesando.setText(archivos[i].getName()); // Escribe el
																// nombre del
																// archivo que
																// se esta
																// procesando en
																// el
																// txt_procesando
				acceso.insertPalabras(lec.processDocument(archivos[i].getName(), archivos[i].getAbsolutePath()),
						archivos[i].getName(), pb_barraProgreso); // Llama al
																	// método
																	// insertarPalabra()
																	// de la
																	// clase
																	// acceso
																	// pasandole
																	// los
																	// parámetros
																	// necesarios
				cargarGrilla();
				archivosProcesados.add(archivosProcesar.get(0)); // agrega el
																	// archivo
																	// procesado
																	// a la
																	// lista
				archivosProcesar.remove(0); // elimina el archivo procesado de
											// la lista de la cola
				cargarCola();
				cargarProcesados();

			}
			Thread.sleep(100);
			return "";
		}

		/**
		 * Este método se ejecuta cuando el swingworker finaliza de ejecutar el
		 * metodo doInBackground()
		 */
		@Override
		protected void done() {
			try {

				txt_procesando.setText(get()); // cuando el swingworker termina
												// de procesar devuelve un
												// string vacío, el cual se
												// agrega al txt_procesando

			} catch (InterruptedException | ExecutionException ex) {
				Logger.getLogger(VocabularioView.class.getName()).log(Level.SEVERE, null, ex);
			}
			bCargarArchivos.setEnabled(true); // Habilita el botón para cargar
												// archivos
			bBorrarBD.setEnabled(true);
		}
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton bBorrarBD;
	private javax.swing.JButton bCargarArchivos;
	private javax.swing.JMenu jMenu3;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JScrollPane jScrollPane5;
	private javax.swing.JLabel lbl_buscador;
	private javax.swing.JLabel lbl_colaDoc;
	private javax.swing.JLabel lbl_docProcesados;
	private javax.swing.JLabel lbl_procesando;
	private javax.swing.JProgressBar pb_barraProgreso;
	private javax.swing.JTable tbl_palabras;
	private javax.swing.JTextField txt_buscador;
	private javax.swing.JTextField txt_procesando;
	private javax.swing.JTextPane txtp_colaDoc;
	private javax.swing.JTextPane txtp_docProcesados;
	// End of variables declaration//GEN-END:variables
}
